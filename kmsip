# 获取当前路径
$currentPath = (Get-Location).Path

# 输入输出文件路径
$inputFile = Join-Path -Path $currentPath -ChildPath "domain_list.txt"
$outputFile = Join-Path -Path $currentPath -ChildPath "outip_list.txt"

# 提示用户确认
Write-Host "`n===> Input file: $inputFile"
Write-Host "===> Output file: $outputFile"
Write-Host "===> Please confirm the paths and press any key to continue..."
[System.Console]::ReadKey() > $null

# 检查输入文件是否存在
if (-not (Test-Path -Path $inputFile)) {
    Write-Host "===> Error: Input file not found: $inputFile"
    return
}

# 创建输出文件（如不存在）
if (-not (Test-Path -Path $outputFile)) {
    Write-Host "===> Output file not found. Creating new file: $outputFile"
    New-Item -ItemType File -Path $outputFile -Force | Out-Null
}

# 清空输出内容
Clear-Content -Path $outputFile -ErrorAction SilentlyContinue

# 读取域名列表
$domains = Get-Content -Path $inputFile

# 遍历每个域名
foreach ($domain in $domains) {
    $ipAddresses = @()

    try {
        # 解析 A 和 CNAME 记录
        $dnsRecords = Resolve-DnsName -Name $domain -Server 8.8.8.8 -ErrorAction Stop

        # 处理 A 记录
        $aRecords = $dnsRecords | Where-Object { $_.QueryType -eq 'A' }
        $ipAddresses += $aRecords | Select-Object -ExpandProperty IPAddress

        # 处理 CNAME 记录
        $cnameRecords = $dnsRecords | Where-Object { $_.QueryType -eq 'CNAME' }
        foreach ($cname in $cnameRecords) {
            try {
                $cnameARecords = Resolve-DnsName -Name $cname.NameHost -Type A -Server 8.8.8.8 -ErrorAction Stop
                $ipAddresses += $cnameARecords | Where-Object { $_.QueryType -eq 'A' } | Select-Object -ExpandProperty IPAddress
            } catch {
                Write-Host "===> CNAME target resolution failed: $($cname.NameHost)"
            }
        }

        # 如果无可用IP，跳过
        if ($ipAddresses.Count -eq 0) {
            Write-Host "===> No IPv4 addresses found: $domain"
            continue
        }

    } catch {
        Write-Host "===> DNS resolution failed: $domain"
        continue
    }

    # 检查每个IP是否能连通1688端口
    foreach ($ip in $ipAddresses) {
        $ipAddress = $ip.ToString()
        $tcpConnection = New-Object System.Net.Sockets.TcpClient
        try {
            $tcpConnection.Connect($ip, 1688)
            if ($tcpConnection.Connected) {
                Add-Content -Path $outputFile -Value "$ipAddress"
                Write-Host "===> Success: $ipAddress :1688"
            }
        } catch {
            Write-Host "===> Unreachable: $ipAddress :1688"
        } finally {
            $tcpConnection.Close()
        }
    }
}

Write-Host "`n===> Completed."
Write-Host "===> Output saved to: $outputFile"
